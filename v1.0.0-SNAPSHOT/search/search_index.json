{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"A self-hosted streaming service for your media collection. <p>AnyStream is free and open-source software that makes it easy to manage and stream your media library from anywhere, on any device. Once running, share access to your collection privately and securely with friends and family. Find missing and newly released content for your collection.</p> <p>Getting Started</p>"},{"location":"2-library-management/","title":"Library Management","text":"<p>AnyStream libraries represents a single kind of media (Movies, TV, etc.) and contain a list of content directories with are regularly scanned to downloading metadata (title, posters, ratings, etc.) and analyze media file contents (audio/video codecs, bitrate, etc.).</p>"},{"location":"2-library-management/#file-and-directory-naming","title":"File and Directory Naming","text":"<p>To understand the file and directory structure of your media files, they must follow a specific naming conventions and folder structures.</p> <p>Without following these requirements, your library may still be understood by AnyStream but alternative naming/structures are not officially supported yet and may result in subtle issues viewing your library.</p>"},{"location":"2-library-management/#basic-requirements","title":"Basic Requirements","text":"<p>There are two common requirements for proper scanning of your media library that apply to every kind of content:</p> <ol> <li> <p>Each type of content (TV Shows, Movies, Music, etc.) are in their own directory.</p> <pre><code>/../media/TV/\n/../media/Movies/\n/../media/Music/\n</code></pre> </li> <li> <p>Media files are not located directly within the content directory, i.e. <code>../videos/TV</code> and <code>../videos/Movies</code> only    contain other directories for specific shows and movies.</p> <pre><code> /../media/TV/Noir (2001)/\n /../media/Movies/Primer (2004)/\n /../media/Music/Chairlift/\n</code></pre> </li> <li> <p>Content folders and files should include the original release year whenever possible to improve accuracy when    automatically matching metadata.</p> </li> </ol>"},{"location":"2-library-management/#movies","title":"Movies","text":"<p>Movie files must be contained within a folder that shares the file's name.</p> <p>For example, AnyStream expects to find movies structure like:</p> <pre><code>  /../Movies/The Cabinet of Dr. Caligari (1920)\n  /../Movies/The Cabinet of Dr. Caligari (1920)/The Cabinet of Dr. Caligari (1920).mp4\n</code></pre> <p>Note the first line is the folder with the <code>&lt;movie title&gt; (&lt;year&gt;)</code> format, and the second line is the movie file with a matching name and the video file extension.</p>"},{"location":"2-library-management/#tv-shows","title":"TV Shows","text":"<p>TV Shows must have a directory with the show's title containing season folders which in turn contain individual episode video files.</p> <p>For example, AnyStream expects to find tv shows structured like:</p> <pre><code>  /../TV/Mister Rogers Neighborhood (1968)\n  /../TV/Mister Rogers Neighborhood (1968)/Season 01/S01E01 - Change The First Program.mp4\n  /../TV/Mister Rogers Neighborhood (1968)/Season 01/S01E02 - King Friday Challenges Change.mp4\n</code></pre> <p>Note each season has a folder with the <code>Season &lt;number&gt;</code> format where the number optionally contains a leading zero.</p> <p>Each episode is contained within it's respective season folder using the <code>S&lt;season number&gt;E&lt;episode number&gt; - &lt;episode name&gt;</code> format where the season and episode numbers contains optional leading zeros.</p> <p>Episode files may optionally use the <code>&lt;show name&gt; - S00E00 - &lt;episode title&gt;</code> format but the directory structure must still contain a parent show and season folder.</p>"},{"location":"2-library-management/#subtitle-files","title":"Subtitle Files","text":""},{"location":"3-clients-and-mobile/","title":"Clients and Mobile Applications","text":"<p>AnyStream makes your library accessible from anywhere with native web and mobile applications. More devices will be supported in the future.</p>"},{"location":"3-clients-and-mobile/#web","title":"Web","text":"<p>AnyStream provides a built-in website to view and manage your library.</p>"},{"location":"3-clients-and-mobile/#android-google-tv","title":"Android / Google TV","text":"<p>Coming soon</p>"},{"location":"3-clients-and-mobile/#ios-apple-tv","title":"iOS / Apple TV","text":"<p>Coming soon</p>"},{"location":"3-clients-and-mobile/#chromecast","title":"Chromecast","text":"<p>Coming Soon</p>"},{"location":"4-connecting-qbittorrent/","title":"Connecting qBittorrent","text":"<p>qBittorrent is a free and reliable P2P Bittorrent client.</p> <p>AnyStream can communicate with qBittorrent to manage importing and organizing new media into your library.</p> Warning <p>You assume all responsibility and risk when using qBittorrent. The BitTorrent protocol is not designed for privacy, ensure you've configured qBittorrent and network firewalls correctly. It is recommended to use a VPN service like AirVPN or Mullvad with qBittorrent.</p>"},{"location":"development/database/","title":"Database","text":"<p>AnyStream uses a single SQLite database for application data, media file references, and metadata.</p>"},{"location":"development/database/#sqlite","title":"SQLite","text":"<p>SQLite is the ideal choice for application portability and to maintain a simple developer experience.</p> <p>Portability</p> <ul> <li>End users are not required to install additional software to run AnyStream (besides a JRE).</li> <li>Usage in a container (i.e. Docker) does not require multiple containers or multiple internal applications.</li> <li>SQLite has broad OS/architecture increasing the number of targets AnyStream can support.</li> <li>The database is a single file that can be backed up or transferred to different hosts without modification or errors.</li> </ul> <p>Simplicity</p> <ul> <li>Reduced datatype complexity and limited niche SQL functionality support</li> <li>Built in full-text search (FTS5)   and JSON storage</li> <li>Limited developer configuration required to build and run the project</li> </ul> <p>Using SQLite is not a perfect experience, for example the lack of <code>RETURNING</code> support for <code>DELETE</code> statements results in more queries and server code to verify and return result data.</p> <p>With that said, it remains the best option for reducing the support overhead and maintaining a simple experience for users.</p> <p>There are no plans to change or support multiple databases.</p>"},{"location":"development/database/#libraries","title":"Libraries","text":"<p>There are 3 parts to consider for providing a stable developer and end user experience for the database:</p> <p>Migrations</p> <p>To maintain a stable database schema and content over time, Flyway is used to preform schema and data migrations.</p> <p>Flyway is a JVM library that is bundled with AnyStream to track and perform migrations automatically.</p> <p>Database Driver</p> <p>xerial/sqlite-jdbc provides both the SQLite library and JDBC driver.</p> <p>Query DSL</p> <p>Interacting with the database is done via jOOQ. It provides a familiar typesafe SQL DSL for Kotlin making SQL easy and safe with tight coupling to related server code.</p> <p>etiennestuder/gradle-jooq-plugin is used to integrate jOOQ's codegen capabilities.</p>"},{"location":"development/database/#schema-design","title":"Schema Design","text":"<p>Single Table Inheritance is applied when possible to simplify building media kind agnostic application APIs. For example: Metadata for movies, tv shows/episodes, and music artists/albums/songs are all stored in the <code>metadata</code> table.</p>"},{"location":"development/database/#migrations","title":"Migrations","text":"<p>See Flyway &gt; Migrations</p> <p>Migrations are written in standard SQL and stored in: <code>server/db-models/src/main/resources/db/migration</code></p> <p>todo: fill this out when migration testing infrastructure exists and v1 schema is final</p>"},{"location":"development/database/#using-jooq","title":"Using jOOQ","text":""},{"location":"development/database/#coroutines-support","title":"Coroutines Support","text":""},{"location":"development/database/#data-models","title":"Data Models","text":""},{"location":"development/documentation/","title":"Documentation","text":"<p>Documentation is created with MkDocs using Material for MkDocs. MkDocs is configured with <code>mkdocs.yml</code> and documentation source is stored in the <code>docs</code> folder.</p>"},{"location":"development/documentation/#install-python","title":"Install Python","text":"<p>Download and install the latest version of Python.</p> macOS Windows"},{"location":"development/documentation/#macos","title":"macOS","text":"<p>Using Homebrew</p> <pre><code>brew install python\n</code></pre>"},{"location":"development/documentation/#windows","title":"Windows","text":"<p>Download and install the recommended version from python.org.</p> <p>Or with Chocolatey</p> <pre><code>choco install python\n</code></pre>"},{"location":"development/documentation/#install-mkdocs-and-plugins","title":"Install MkDocs and plugins","text":"<p>Open a new Terminal or Command Prompt window.</p> <pre><code>pip install -r docs/requirements.txt\n</code></pre> <p>For more information see the MkDocs Installation Guide and the Material for MkDocs Installation Guide.</p>"},{"location":"development/documentation/#writing-documentation","title":"Writing Documentation","text":"<p>Documentation source files are written in Markdown. For navigation and advanced formatting features, see the MkDocs Writing your docs guide and Material for MkDocs Reference.</p> Variables <p>Some dynamic variables are made available, they can be used with the <code>{{ name }}</code> syntax. Below are the available variables.</p> Name Value version The current release version, for example <code>2.3.5</code> (No <code>v</code> prefix)"},{"location":"development/documentation/#view-docs-locally","title":"View docs locally","text":"<p>To view the docs locally, open a terminal or command prompt and cd into your <code>anystream</code> folder then run</p> <pre><code>mkdocs serve\n</code></pre> <p>Your changes will be served at http://127.0.0.1:8000. After saving changes, the webpage will reload automatically.</p>"},{"location":"development/documentation/#deployment","title":"Deployment","text":"<p>Changes are deployed to docs.anystream.dev automatically when merged into the <code>main</code> branch.</p>"},{"location":"development/architecture/library-management/","title":"Library Management","text":""},{"location":"installation/configure-server/","title":"Configure Server","text":"<p>Is your server running? See Installation &gt; Getting Started first.</p> <p>When the server has started without errors, the web client will be available at localhost:8888 or whatever port you've specified.</p>"},{"location":"installation/configure-server/#create-an-admin-user","title":"Create an Admin User","text":"<p>After starting a new AnyStream instance, the first user signup does not require an invitation code and will be granted global permissions.</p> <p>Danger</p> <p>It is important to register an admin user immediately after starting AnyStream for the first time. If left incomplete, unauthorized users my be able to modify system files via AnyStream.</p>"},{"location":"installation/configure-server/#importing-media","title":"Importing Media","text":"<p>Importing your media files starts by adding a directory to a Library.</p> <p>Before adding a library directory, ensure your media files follow the guidelines in File and Directory Naming.</p> <ol> <li>Navigate to Settings &gt; Libraries</li> <li>Click \"Edit\" on the desired Library</li> <li>Click \"Add Folder\"</li> <li>Select or paste the folder path and click \"Add\"</li> </ol> <p>That's it!  All the media files will be scanned and metadata will be downloaded. You can navigate to the home page to see your library populate in real time.</p>"},{"location":"installation/configure-server/#inviting-users","title":"Inviting Users","text":"<p>You can add new users manually or create unique URLs to share which allow a single person to create an account with the desired permissions.</p> <p>To create an invitation URL:</p> <ul> <li>Navigate to Settings &gt; Users, then click \"Manage Invites\".</li> <li>Select the permissions required by the new User, then click \"Create Invite\".</li> <li>The new invite will be added to the list and a sharable signup link will be copied to your clipboard.</li> </ul>"},{"location":"installation/docker/","title":"Docker","text":"<p>A small Alpine based docker image is provided at ghcr.io/drewcarlson/anystream.</p> <p>Note</p> <p>In the future, a ubuntu based image with hardware transcoding support will be provided.</p>"},{"location":"installation/docker/#docker-cli","title":"Docker CLI","text":"<p>Docker CLI example</p> <pre><code>docker run -d --name anystream \\\n    -v /path/to/anystream:/app/storage \\\n    -v /path/to/media:/app/media \\\n    -p 8888:8888 \\\n    ghcr.io/drewcarlson/anystream:main\n</code></pre>"},{"location":"installation/docker/#docker-compose","title":"Docker Compose","text":"<p>Create a <code>docker-compose.yml</code> copy one of the following examples:</p> <p>Without qBittorrent</p> <pre><code>version: '3.1'\nservices:\n  anystream:\n    container_name: anystream\n    image: ghcr.io/drewcarlson/anystream:main\n    restart: unless-stopped\n    ports:\n      - \"8888:8888\"\n    volumes:\n      - /path/to/anystream:/app/storage\n      - /path/to/media:/app/media\n</code></pre> With qBittorrent <pre><code>version: '3.1'\nservices:\n  anystream:\n    container_name: anystream\n    image: ghcr.io/drewcarlson/anystream:main\n    restart: unless-stopped\n    ports:\n      - \"8888:8888\"\n    environment:\n      QBT_URL: http://qbittorrent:9090\n      QBT_USER: admin\n      QBT_PASSWORD: adminadmin\n    volumes:\n      - /path/to/anystream:/app/storage\n      - /path/to/media:/app/media\n      - /path/to/qbittorrent/downloads:/app/downloads\n    links:\n      - qbittorrent\n    depends_on:\n      - qbittorrent\n\n  qbittorrent:\n    image: drewcarlson/docker-qbittorrentvpn\n    container_name: qbittorrent\n    restart: unless-stopped\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv6.conf.all.disable_ipv6=0\n    privileged: true\n    environment:\n      - VPN_ENABLED=yes\n      - NAME_SERVERS=1.1.1.1,8.8.8.8\n      - WEBUI_PORT=9090\n      - TZ=America/Los_Angeles\n      - UMASK_SET=022\n    volumes:\n      - /path/to/qbittorrent/config:/config\n      - /path/to/qbittorrent/downloads:/downloads\n      - /path/to/media:/content\n</code></pre> <p>Once you've configured the <code>docker-compose.yml</code> file, start it with:</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"installation/docker/#configure-server","title":"Configure Server","text":"<p>Now your server is running and ready to be used! See Installation &gt; Configure Server for what to do next.</p>"},{"location":"installation/getting-started/","title":"Getting started","text":"<p>This page covers running the AnyStream server manually. See Installation &gt; Docker to use the containerized server.</p>"},{"location":"installation/getting-started/#read-this-first","title":"Read this first","text":"<p>AnyStream is a private streaming service for your media files. Third party APIs and optional external applications are used to improve the quality of your collection. You are responsible for operating any external applications that AnyStream communicates with while managing your collection.</p> <p>To maintain privacy it is recommended that you run AnyStream with a VPN like AirVPN or Mullvad.</p>"},{"location":"installation/getting-started/#requirements","title":"Requirements","text":""},{"location":"installation/getting-started/#java-11","title":"Java 11+","text":""},{"location":"installation/getting-started/#windows","title":"Windows","text":"Install Manually <p>Download the JRE 11 MSI file and run the installer. Follow the instructions until the installation is complete. For more information see \"Install Azul Zulu with MSI installer\"</p> Install with Chocolatey <pre><code>choco install zulu --version=11.29.11\n</code></pre>"},{"location":"installation/getting-started/#macos","title":"macOS","text":"Install Manually <p>Download the JRE 11 for Intel DMG file or JRE 11 for M1. Double click the file and follow the instructions until the installation is complete.</p> Install with Homebrew <pre><code>brew tap mdogan/zulu\nbrew install zulu-jdk11\n</code></pre> Install with MacPorts <pre><code>sudo port install openjdk11-zulu\n</code></pre>"},{"location":"installation/getting-started/#ffmpeg","title":"FFmpeg","text":"<p>FFmpeg is required to transcode your media library when streaming to certain devices and analyzing media files.</p>"},{"location":"installation/getting-started/#windows_1","title":"Windows","text":"Install Manually <p>Click here to download FFmpeg. Extract <code>fmpeg-n4.4-latest-win64-gpl-4.4.zip</code> and rename the <code>bin</code> folder to <code>ffmpeg</code> and move it to <code>C:\\Program Files\\ffmpeg</code>.</p> Install with Chocolatey <pre><code>choco install ffmpeg\n</code></pre>"},{"location":"installation/getting-started/#macos_1","title":"macOS","text":"Install Manually <p>Click here to download FFmpeg and here to download FFprobe. Extract both files into <code>/usr/local/bin</code></p> Install with Homebrew <pre><code>brew install ffmpeg\n</code></pre> Install with MacPorts <pre><code>sudo port install ffmpeg\n</code></pre>"},{"location":"installation/getting-started/#download-anystream","title":"Download AnyStream","text":"Stay up-to-date <p>It is recommended the latest version of AnyStream is used at all times, but older versions are available on the Releases page if required.</p> One download for any Operating System <p>The AnyStream server runs on Linux, macOS, or Windows with one download, you do not need a version specifically for your operating system.</p> <p>The latest release can be viewed on the Github Release page or choose your preferred format below:</p> Download ZIP Download TAR anystream-server-1.0.0-SNAPSHOT.zip anystream-server-1.0.0-SNAPSHOT.tar"},{"location":"installation/getting-started/#installation","title":"Installation","text":"<p>AnyStream tries to provide optimal default configuration and can be run without any configuration.</p> Configuration (Environment variables) <p>The following optiions can be modified on your first run to customize AnyStream for your system.</p> name value description <code>PORT</code> <code>8888</code> The port used to serve the web client and API. <code>DATA_PATH</code> macos = <code>/Users/&lt;user&gt;/anystream</code>linux = <code>/home/&lt;user&gt;/anystream</code>windows = <code>C:\\Users\\&lt;user&gt;\\anystream</code> The folder where all data generated by anystream will be stored. Note this is not the folder for your media collection. <code>DATABASE_URL</code> <code>sqlite:&lt;DATA_PATH&gt;/config/anystream.db</code> The file where the database will be stored. (Note the <code>sqlite:</code> prefix is required) <code>FFMPEG_PATH</code> macos = <code>/usr/bin</code>linux = <code>/usr/bin</code>windows = <code>C:\\Program Files\\ffmpeg</code> The directory which contains FFmpeg and FFprobe binaries. <code>WEB_CLIENT_PATH</code> (none) The folder which contains the Web client files to be served. By default these files are provided by the server binary. Configuration (Program arguments) <p>If preferred, AnyStream accepts arguments instead of Environment variables. The table below maps the Environment variable name to the CLI argument, see \"Configuration (Environment variables)\" for descriptions of each option.</p> Env Name CLI Argument <code>PORT</code> <code>-port=8888</code> <code>DATA_PATH</code> <code>-app.dataPath=\"...\"</code> <code>DATABASE_URL</code> <code>-app.databaseUrl=\"...\"</code> <code>FFMPEG_PATH</code> <code>-app.ffmpegPath=\"...\"</code> <code>WEB_CLIENT_PATH</code> <code>-app.webClientPath=\"...\"</code>"},{"location":"installation/getting-started/#run-on-windows","title":"Run on Windows","text":"<p>Newer versions of Windows 10 include <code>curl</code> and <code>tar</code>, if you're running an older version of Windows, follow the \"Manual Download\" section. Otherwise, see the \"Command Prompt Download\" section.</p> Manual Download <ol> <li>Download anystream-server-1.0.0-SNAPSHOT.zip</li> <li>Right click <code>anystream-server-1.0.0-SNAPSHOT.zip</code>, click \"Extract All...\", then click \"Extract\" when the window appears</li> <li>Open the <code>anystream-server-1.0.0-SNAPSHOT/bin</code> folder</li> <li>Double click on <code>anystream.bat</code></li> </ol> <p>You will see a Command Prompt window appear, displaying log messages from AnyStream.</p> Command Prompt Download <pre><code>&gt; curl -LO https://github.com/DrewCarlson/AnyStream/releases/download/v1.0.0-SNAPSHOT/anystream-server-1.0.0-SNAPSHOT.tar\n&gt; tar -xvf anystream-server-1.0.0-SNAPSHOT.tar\n&gt; cd anystream-1.0.0-SNAPSHOT/bin\n&gt; anystream -port=8888 -P:app.ffmpegPath=\"C:\\Users\\&lt;user&gt;\\Downloads\\ffmpeg\"\n</code></pre> <p>AnyStream will be running and printing log messages until you close the window or press <code>ctrl + c</code>.</p>"},{"location":"installation/getting-started/#run-on-linux-or-macos","title":"Run on Linux or macOS","text":"anystream from Terminal example <pre><code>$ curl -LO https://github.com/DrewCarlson/AnyStream/releases/download/v1.0.0-SNAPSHOT/anystream-server-1.0.0-SNAPSHOT.tar\n$ tar -xvf anystream-server-1.0.0-SNAPSHOT.tar\n$ cd anystream-1.0.0-SNAPSHOT/bin\n$ ./anystream -port=8888\n</code></pre>"},{"location":"installation/getting-started/#configure-server","title":"Configure Server","text":"<p>Now your server is running and ready to be used! See Installation &gt; Configure Server for what to do next.</p>"}]}